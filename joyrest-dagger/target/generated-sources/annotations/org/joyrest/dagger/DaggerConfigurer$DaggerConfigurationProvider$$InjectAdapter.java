// Code generated by dagger-compiler.  Do not edit.
package org.joyrest.dagger;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<DaggerConfigurer.DaggerConfigurationProvider>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code DaggerConfigurer.DaggerConfigurationProvider} and its
 * dependencies.
 *
 * Being a {@code Provider<DaggerConfigurer.DaggerConfigurationProvider>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<DaggerConfigurer.DaggerConfigurationProvider>} and handling injection
 * of annotated fields.
 */
public final class DaggerConfigurer$DaggerConfigurationProvider$$InjectAdapter extends Binding<DaggerConfigurer.DaggerConfigurationProvider>
    implements Provider<DaggerConfigurer.DaggerConfigurationProvider>, MembersInjector<DaggerConfigurer.DaggerConfigurationProvider> {
  private Binding<Set<org.joyrest.aspect.Aspect>> aspects;
  private Binding<Set<org.joyrest.transform.Reader>> readers;
  private Binding<Set<org.joyrest.transform.Writer>> writers;
  private Binding<Set<org.joyrest.exception.configuration.ExceptionConfiguration>> exceptionConfigurations;
  private Binding<Set<org.joyrest.routing.ControllerConfiguration>> controllerConfiguration;

  public DaggerConfigurer$DaggerConfigurationProvider$$InjectAdapter() {
    super("org.joyrest.dagger.DaggerConfigurer$DaggerConfigurationProvider", "members/org.joyrest.dagger.DaggerConfigurer$DaggerConfigurationProvider", NOT_SINGLETON, DaggerConfigurer.DaggerConfigurationProvider.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    aspects = (Binding<Set<org.joyrest.aspect.Aspect>>) linker.requestBinding("java.util.Set<org.joyrest.aspect.Aspect>", DaggerConfigurer.DaggerConfigurationProvider.class, getClass().getClassLoader());
    readers = (Binding<Set<org.joyrest.transform.Reader>>) linker.requestBinding("java.util.Set<org.joyrest.transform.Reader>", DaggerConfigurer.DaggerConfigurationProvider.class, getClass().getClassLoader());
    writers = (Binding<Set<org.joyrest.transform.Writer>>) linker.requestBinding("java.util.Set<org.joyrest.transform.Writer>", DaggerConfigurer.DaggerConfigurationProvider.class, getClass().getClassLoader());
    exceptionConfigurations = (Binding<Set<org.joyrest.exception.configuration.ExceptionConfiguration>>) linker.requestBinding("java.util.Set<org.joyrest.exception.configuration.ExceptionConfiguration>", DaggerConfigurer.DaggerConfigurationProvider.class, getClass().getClassLoader());
    controllerConfiguration = (Binding<Set<org.joyrest.routing.ControllerConfiguration>>) linker.requestBinding("java.util.Set<org.joyrest.routing.ControllerConfiguration>", DaggerConfigurer.DaggerConfigurationProvider.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(aspects);
    injectMembersBindings.add(readers);
    injectMembersBindings.add(writers);
    injectMembersBindings.add(exceptionConfigurations);
    injectMembersBindings.add(controllerConfiguration);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<DaggerConfigurer.DaggerConfigurationProvider>}.
   */
  @Override
  public DaggerConfigurer.DaggerConfigurationProvider get() {
    DaggerConfigurer.DaggerConfigurationProvider result = new DaggerConfigurer.DaggerConfigurationProvider();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<DaggerConfigurer.DaggerConfigurationProvider>}.
   */
  @Override
  public void injectMembers(DaggerConfigurer.DaggerConfigurationProvider object) {
    object.aspects = aspects.get();
    object.readers = readers.get();
    object.writers = writers.get();
    object.exceptionConfigurations = exceptionConfigurations.get();
    object.controllerConfiguration = controllerConfiguration.get();
  }

}
