// Code generated by dagger-compiler.  Do not edit.
package org.joyrest.examples.di.jokeapp.dagger;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import dagger.internal.SetBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class DaggerApplicationModule$$ModuleAdapter extends ModuleAdapter<DaggerApplicationModule> {
  private static final String[] INJECTS = { "members/org.joyrest.dagger.DaggerConfigurer$DaggerConfigurationProvider", "members/org.joyrest.examples.di.jokeapp.JokeController", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public DaggerApplicationModule$$ModuleAdapter() {
    super(org.joyrest.examples.di.jokeapp.dagger.DaggerApplicationModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public DaggerApplicationModule newModule() {
    return new org.joyrest.examples.di.jokeapp.dagger.DaggerApplicationModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, DaggerApplicationModule module) {
    SetBinding.add(bindings, "java.util.Set<org.joyrest.aspect.Interceptor>", new NullAspectProvidesAdapter(module));
    SetBinding.add(bindings, "java.util.Set<org.joyrest.exception.configuration.ExceptionConfiguration>", new JokeExceptionConfigurationProvidesAdapter(module));
    SetBinding.add(bindings, "java.util.Set<org.joyrest.transform.Writer>", new JsonWriterProvidesAdapter(module));
    SetBinding.add(bindings, "java.util.Set<org.joyrest.transform.Reader>", new JsonReaderProvidesAdapter(module));
    SetBinding.add(bindings, "java.util.Set<org.joyrest.routing.ControllerConfiguration>", new JokeControllerConfigurationProvidesAdapter(module));
    bindings.contributeProvidesBinding("org.joyrest.examples.di.jokeapp.JokeService", new JokeServiceProvidesAdapter(module));
  }

  /**
   * A {@code Binding<org.joyrest.aspect.Interceptor>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.joyrest.aspect.Interceptor>} and handling creation and
   * preparation of object instances.
   */
  public static final class NullAspectProvidesAdapter extends ProvidesBinding<org.joyrest.aspect.Interceptor>
      implements Provider<org.joyrest.aspect.Interceptor> {
    private final DaggerApplicationModule module;

    public NullAspectProvidesAdapter(DaggerApplicationModule module) {
      super("org.joyrest.aspect.Interceptor", NOT_SINGLETON, "org.joyrest.examples.di.jokeapp.dagger.DaggerApplicationModule", "nullAspect");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.joyrest.aspect.Interceptor>}.
     */
    @Override
    public org.joyrest.aspect.Interceptor get() {
      return module.nullAspect();
    }
  }

  /**
   * A {@code Binding<org.joyrest.exception.configuration.ExceptionConfiguration>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.joyrest.exception.configuration.ExceptionConfiguration>} and handling creation and
   * preparation of object instances.
   */
  public static final class JokeExceptionConfigurationProvidesAdapter extends ProvidesBinding<org.joyrest.exception.configuration.ExceptionConfiguration>
      implements Provider<org.joyrest.exception.configuration.ExceptionConfiguration> {
    private final DaggerApplicationModule module;

    public JokeExceptionConfigurationProvidesAdapter(DaggerApplicationModule module) {
      super("org.joyrest.exception.configuration.ExceptionConfiguration", NOT_SINGLETON, "org.joyrest.examples.di.jokeapp.dagger.DaggerApplicationModule", "jokeExceptionConfiguration");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.joyrest.exception.configuration.ExceptionConfiguration>}.
     */
    @Override
    public org.joyrest.exception.configuration.ExceptionConfiguration get() {
      return module.jokeExceptionConfiguration();
    }
  }

  /**
   * A {@code Binding<org.joyrest.transform.Writer>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.joyrest.transform.Writer>} and handling creation and
   * preparation of object instances.
   */
  public static final class JsonWriterProvidesAdapter extends ProvidesBinding<org.joyrest.transform.Writer>
      implements Provider<org.joyrest.transform.Writer> {
    private final DaggerApplicationModule module;

    public JsonWriterProvidesAdapter(DaggerApplicationModule module) {
      super("org.joyrest.transform.Writer", NOT_SINGLETON, "org.joyrest.examples.di.jokeapp.dagger.DaggerApplicationModule", "jsonWriter");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.joyrest.transform.Writer>}.
     */
    @Override
    public org.joyrest.transform.Writer get() {
      return module.jsonWriter();
    }
  }

  /**
   * A {@code Binding<org.joyrest.transform.Reader>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.joyrest.transform.Reader>} and handling creation and
   * preparation of object instances.
   */
  public static final class JsonReaderProvidesAdapter extends ProvidesBinding<org.joyrest.transform.Reader>
      implements Provider<org.joyrest.transform.Reader> {
    private final DaggerApplicationModule module;

    public JsonReaderProvidesAdapter(DaggerApplicationModule module) {
      super("org.joyrest.transform.Reader", NOT_SINGLETON, "org.joyrest.examples.di.jokeapp.dagger.DaggerApplicationModule", "jsonReader");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.joyrest.transform.Reader>}.
     */
    @Override
    public org.joyrest.transform.Reader get() {
      return module.jsonReader();
    }
  }

  /**
   * A {@code Binding<org.joyrest.routing.ControllerConfiguration>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.joyrest.routing.ControllerConfiguration>} and handling creation and
   * preparation of object instances.
   */
  public static final class JokeControllerConfigurationProvidesAdapter extends ProvidesBinding<org.joyrest.routing.ControllerConfiguration>
      implements Provider<org.joyrest.routing.ControllerConfiguration> {
    private final DaggerApplicationModule module;

    public JokeControllerConfigurationProvidesAdapter(DaggerApplicationModule module) {
      super("org.joyrest.routing.ControllerConfiguration", NOT_SINGLETON, "org.joyrest.examples.di.jokeapp.dagger.DaggerApplicationModule", "jokeControllerConfiguration");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.joyrest.routing.ControllerConfiguration>}.
     */
    @Override
    public org.joyrest.routing.ControllerConfiguration get() {
      return module.jokeControllerConfiguration();
    }
  }

  /**
   * A {@code Binding<org.joyrest.examples.di.jokeapp.JokeService>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.joyrest.examples.di.jokeapp.JokeService>} and handling creation and
   * preparation of object instances.
   */
  public static final class JokeServiceProvidesAdapter extends ProvidesBinding<org.joyrest.examples.di.jokeapp.JokeService>
      implements Provider<org.joyrest.examples.di.jokeapp.JokeService> {
    private final DaggerApplicationModule module;

    public JokeServiceProvidesAdapter(DaggerApplicationModule module) {
      super("org.joyrest.examples.di.jokeapp.JokeService", NOT_SINGLETON, "org.joyrest.examples.di.jokeapp.dagger.DaggerApplicationModule", "jokeService");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.joyrest.examples.di.jokeapp.JokeService>}.
     */
    @Override
    public org.joyrest.examples.di.jokeapp.JokeService get() {
      return module.jokeService();
    }
  }
}
