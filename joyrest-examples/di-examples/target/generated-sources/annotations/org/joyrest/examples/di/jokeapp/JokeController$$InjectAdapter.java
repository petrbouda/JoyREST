// Code generated by dagger-compiler.  Do not edit.
package org.joyrest.examples.di.jokeapp;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<JokeController>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code JokeController} and its
 * dependencies.
 *
 * Being a {@code Provider<JokeController>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<JokeController>} and handling injection
 * of annotated fields.
 */
public final class JokeController$$InjectAdapter extends Binding<JokeController>
    implements Provider<JokeController>, MembersInjector<JokeController> {
  private Binding<JokeService> service;
  private Binding<org.joyrest.routing.TypedControllerConfiguration> supertype;

  public JokeController$$InjectAdapter() {
    super("org.joyrest.examples.di.jokeapp.JokeController", "members/org.joyrest.examples.di.jokeapp.JokeController", NOT_SINGLETON, JokeController.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    service = (Binding<JokeService>) linker.requestBinding("org.joyrest.examples.di.jokeapp.JokeService", JokeController.class, getClass().getClassLoader());
    supertype = (Binding<org.joyrest.routing.TypedControllerConfiguration>) linker.requestBinding("members/org.joyrest.routing.TypedControllerConfiguration", JokeController.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(service);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<JokeController>}.
   */
  @Override
  public JokeController get() {
    JokeController result = new JokeController();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<JokeController>}.
   */
  @Override
  public void injectMembers(JokeController object) {
    object.service = service.get();
    supertype.injectMembers(object);
  }

}
